pub struct String {
    data: *u8;
    len: u64;

    pub fn init(self: *String, str: *const u8) void {
        const len = find_len(str);
        const buf = @malloc(len) as *u8;
        copy_nstr(len, str, buf);

        self.*.data = buf;
        self.*.len = len;
    }

    pub fn init_from(self: *String, other: *const String) void {
        const len = other.*.len;
        const buf = @malloc(len) as *u8;
        copy_nstr(len, other.*.data, buf);

        self.*.data = buf; // TROUBLE MAKER, TRY TO FIX ME PLEASE
        self.*.len = len;
    }

    pub fn display(self: *const String) void {
        @printf("%.*s\n", self.*.len, self.*.data);
    }

    pub fn eql(self: *const String, other: *const String) bool {
        const len = self.*.len;
        if (len != other.*.len) return false;

        const self_data = self.*.data;
        const other_data = other.*.data;

        var current = 0;
        while (current < len) {
            if (self_data[current] != other_data[current]) return false;

            current += 1;
        }

        return true;
    }

    pub fn hash(self: *const String) u32 {
        var hash = 2166126261 as u32;
    
        const data = self.*.data;
        const len = self.*.len;

        var index = 0;
        while (index < len) {
            hash ^= data[index];
            hash *= 1677619 as u32;
        } loop index += 1;

        return hash;
    }
}

// String helper methods
fn find_len(data: *const u8) u64 {
    var current = data;
    while (current.* != 0) {
        current = &current[1];
    }
    return (current - data) as u64;
}

fn copy_nstr(len: u64, source: *const u8, buffer: *u8) void {
    var current = 0 as u64;
    while (current < len) {
        buffer[current] = source[current];
        current += 1 as u64;
    }
}