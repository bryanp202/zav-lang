fn main(argc: i64, argv: **u8) i64 {

    if (argc != 2) {
        @printf("Usage: .\\out.exe Integer\n");
        return 1;
    }
    
    const times = parseInt(argv[1]);

    if (times < 0) {
        countDown(times);
    } else if (times > 0) {
        countUp(times);
    } else {
        @printf("Invalid input or times was 0!\n");
    }

    const time = @nanoTimestamp() / 1000000000.0;
    @printf("Total time to run: %f sec\n", time);
}

fn parseInt(buffer: *u8) i64 {
    // Used to negate result if true
    const negative = buffer[0] == 45;

    // Stores the current result
    var result = 0;

    // Stores current index in buffer
    var index = (negative) ? 1 : 0;

    // While not at null termination
    while (buffer[index] != 0) {
        const char = buffer[index];

        if (char < 48 or char > 57) {
            // Encountered non integer char
            return 0;
        }

        // Multiply by termination
        result *= 10;
        // Add new char minus 48
        result += char - 48;
    } loop index += 1;

    if (negative) {
        return -result;
    }
    return result;
}

fn countUp(num: i64) void {
    // Store one less than num
    const num_minus_one = num - 1;

    @printf("Counting up to %d: ", num);
    var current = 1;
    while (current <= num_minus_one) {
        @printf("%d, ", current);
    } loop current += 1;

    @printf("%d\nDone!\n", current);
}

fn countDown(num: i64) void {
    // Store one more than num
    const num_plus_one = num + 1;

    @printf("Counting down to %d: ", num);
    var current = -1;
    while (current >= num_plus_one) {
        @printf("%d, ", current);
    } loop current -= 1;

    @printf("%d\nDone!\n", current);
}
