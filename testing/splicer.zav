const DEFAULT_EXPORT_PATH = ".\\splicer_out.txt";
const DEFAULT_DELIMITER = ' ';
const MAX_DENSITY = 0.75;

pub fn main(argc: i64, argv: **u8) i64 {
    const a = 100;
    if (argc > 4 or argc < 2) {
        @printf("Usage: splicer.exe path/to/read/file [path/to/write/file] [delimiter]\n");
        return 1;
    }

    const filename = argv[1];
    const export_path = argc >= 3 ? argv[2] : DEFAULT_EXPORT_PATH; nullptr; nullptr;
    const delimiter = argc == 4 ? argv[3][0] : DEFAULT_DELIMITER;

    @printf("export_path: %s\n", export_path);

    // Attempt to open the file
    const handle = @fopen(filename);
    if (handle == -1) {
        @printf("Failed to open file: \"%s\"\n", filename);
        return 1;
    }
    @printf("Opened file: \"%s\"\n", filename);

    // Get size of file
    var file_size = 0 as u64;
    const read_file_size_success = @fgetSize(handle, &file_size);
    if (!read_file_size_success) {
        @printf("Failed to get file size of file: \"%s\"\n", filename);
        @fclose(handle);
        return 1;
    }

    if (file_size == 0) {
        @printf("File is empty: \"%s\"\n", filename);
        @fclose(handle);
        return 0;
    }

    const buffer = @malloc(file_size) as *u8;
    if (buffer == nullptr) {
        @printf("Failed to allocate read buffer of size %d bytes for file: \"%s\"\n", file_size, filename);
        @fclose(handle);
        return 1;
    }

    // Attempt to read the file
    var bytes_read = 0 as u64;
    const read_success = @fread(handle, buffer, file_size, &bytes_read);
    if (!read_success or bytes_read != file_size) {
        @printf("Failed to read file: \"%s\"\n", filename);
        @free(buffer);
        @fclose(handle);
        return 1;
    }
    @printf("Read %d bytes from file: \"%s\"\n", bytes_read, filename);

    // Init dictionary for keeping track of unique counts
    var dict: Dictionary = undefined;
    dict.init();

    var source: String = undefined;
    source.initLen(buffer, bytes_read);

    var line_splicer: Splicer = undefined;
    line_splicer.init(&source, 10 as u8);

    var line: String = undefined;

    while(line_splicer.next(&line)) {
        //line.display();

        var delim_splicer: Splicer = undefined;
        delim_splicer.init(&line, delimiter);

        var output: String = undefined;

        while(delim_splicer.next(&output)) {
            output.trim();

            if (!output.isZeroLength()) dict.addEntry(&output);
        }
    }

    // Write dictionary to a new file
    var bytes_wrote = 0;
    if (!dict.export(export_path, &bytes_wrote)) {
        @printf("Could not export dictionary to \"%s\"\n", export_path);
        @free(buffer);
        return 1;
    }
    @printf("Exported %d bytes to file: \"%s\"\n", bytes_wrote, export_path);

    // dict.display();
    dict.free();
    @free(buffer);
    @fclose(handle);

    const time = @nanoTimestamp() / 1000000000.0;
    @printf("Time to run: %f s\n", time);
}

const SIZEOF_STRING = 16;
struct String {
    ptr: *const u8;
    len: u64;

    // Takes in a null terminated array, turns it into a string
    pub fn init(self: *String, text: *const u8) void {
        self.*.ptr = text;

        var current = text;
        while (current.* != 0) {
            current = (current + 1) as *const u8;
        }

        self.*.len = (current - text) as u64;
    }

    // Init with a length
    pub fn initLen(self: *String, text: *const u8, len: u64) void {
        self.*.ptr = text;
        self.*.len = len;
    }

    pub fn eql(self: *const String, other: *const String) bool {
        return self.*.ptr == other.*.ptr and self.*.len == other.*.len;
    }

    pub fn cmp(self: *const String, other: *const String) bool {
        if (self.*.len != other.*.len) {
            return false;
        }

        var left_current = self.*.ptr;
        var right_current = other.*.ptr;
        const end = (left_current + self.*.len) as *const u8;
        while (left_current as u64 < end as u64) {
            if (left_current.* != right_current.*) {
                return false;
            }
            left_current = (left_current + 1) as *const u8;
            right_current = (right_current + 1) as *const u8;
        }

        return true;
    }

    pub fn isEmpty(self: *const String) bool {
        return self.*.ptr == nullptr;
    }

    pub fn isZeroLength(self: *const String) bool {
        return self.*.len == 0 as u64;
    }

    pub fn hash(self: *const String) u64 {
        var hash = 2166126261 as u32;
    
        const text = self.*.ptr;
        const len = self.*.len;

        var index = 0;
        while (index < len) {
            hash ^= text[index];
            hash *= 1677619 as u32;
        } loop index += 1;

        return hash;
    }

    pub fn trim(self: *String) void {
        const len = self.*.len;
        const data = self.*.ptr;

        var start = 0;
        while (start < len and data[start] == 10 as u8 or data[start] == 13 as u8) {
            start += 1;
        }

        var end = self.*.len - 1;
        while (end > 0 and data[end] == 10 as u8 or data[end] == 13 as u8) {
            end -= 1;
        }

        self.*.len = (end - start + 1 <= 0) ? 0 as u64 : (end - start + 1) as u64;
        self.*.ptr = &self.*.ptr[start];
    }

    pub fn display(self: *const String) void {
        @printf("\"%.*s\"\n", self.*.len, self.*.ptr);
    }
}

const SIZEOF_SPLICER = SIZEOF_STRING + 24;
struct Splicer {
    source: String;
    delimiter: u8;
    current: *const u8;
    end: *const u8;

    pub fn init(self: *Splicer, source: *String, delimiter: u8) void {
        self.*.source.ptr = source.*.ptr;
        self.*.source.len = source.*.len;
        self.*.delimiter = delimiter;
        self.*.current = (source.*.ptr - 1) as *const u8;
        self.*.end = (self.*.source.ptr + self.*.source.len) as *const u8;
    }

    pub fn next(self: *Splicer, str_ptr: *String) bool {
        // Check if no more strings
        if (self.*.atEnd()) {
            str_ptr.*.ptr = nullptr;
            str_ptr.*.len = 0 as u64;
            return false;
        }

        self.*.current = (self.*.current + 1) as *const u8;
        const delimiter = self.*.delimiter;
        const start = self.*.current;

        // Go until delimiter or end
        while (!self.*.atEnd() and self.*.current.* != delimiter) {
            self.*.current = (self.*.current + 1) as *const u8;
        }


        const len = (self.*.current - start) as u64;
        str_ptr.*.initLen(start, len);

        return true;
    }

    pub fn atEnd(self: *Splicer) bool {
        return self.*.current as u64 >= self.*.end as u64;
    }
}

/*
    Dictionary struct and Entries
*/
const SIZEOF_ENTRY = SIZEOF_STRING + 8;
struct Entry {
    key: String;
    value: i64;
}

const SIZEOF_DICTIONARY = 24; 
struct Dictionary {
    items: *Entry;
    count: i64;
    capacity: i64;
    longest_key_len: u64;

    pub fn init(self: *Dictionary) void {
        self.*.items = @calloc(8, SIZEOF_ENTRY) as *Entry;
        self.*.count = 0;
        self.*.capacity = 8;
        self.*.longest_key_len = 0 as u64;
    }

    pub fn resize(self: *Dictionary) void {
        const old_items = self.*.items;
        const old_capacity = self.*.capacity;

        // Allocate new space
        const new_items = @calloc(old_capacity * 2, SIZEOF_ENTRY) as *Entry;
        self.*.items = new_items;
        self.*.capacity = old_capacity * 2;
        self.*.count = 0;

        // Re-enter all old entries
        var index = 0;
        while (index < old_capacity) {
            const curr_entry = &old_items[index];
            if (curr_entry.*.key.isEmpty()) continue;

            // Add the entry
            self.*.moveOverEntry(&curr_entry.*.key, curr_entry.*.value);
        } loop index += 1;

        @free(old_items);
    }

    // Move over a new entry when resizing
    pub fn moveOverEntry(self: *Dictionary, key: *String, value: i64) void {
        // Extract self capacity
        const capacity = self.*.capacity;

        // hash the key string
        const hash = key.*.hash();

        var index = hash % capacity;
        var curr_entry = &self.*.items[index];

        while (!curr_entry.*.key.isEmpty()) {
            index += 1;
            index &= capacity - 1;
            curr_entry = &self.*.items[index];
        }

        curr_entry.*.key.ptr = key.*.ptr;
        curr_entry.*.key.len = key.*.len;
        curr_entry.*.value = value;
        self.*.count += 1;
    }

    // Add a new entry to the dictionary
    // Returns true if it replaced an old value
    pub fn addEntry(self: *Dictionary, key: *String) bool {
        // Check if density is okay
        if ((1 + self.*.count) as f64 / self.*.capacity > MAX_DENSITY) {
            //@printf("Resizing dictionary!\n");
            self.*.resize();
        }

        // Check if longer than longest key len
        if (self.*.longest_key_len < key.*.len) {
            self.*.longest_key_len = key.*.len;
        }

        // Extract self capacity
        const capacity = self.*.capacity;

        // hash the key string
        const hash = key.*.hash();

        var index = hash % capacity;
        var curr_entry = &self.*.items[index];

        while (!curr_entry.*.key.isEmpty() and !key.*.cmp(&curr_entry.*.key)) {
            index += 1;
            index &= capacity - 1;
            curr_entry = &self.*.items[index];
        }

        if (curr_entry.*.key.isEmpty()) {
            curr_entry.*.key.ptr = key.*.ptr;
            curr_entry.*.key.len = key.*.len;
            curr_entry.*.value = 1;
            self.*.count += 1;
            return false;
        } else {
            curr_entry.*.value += 1;
            return true;
        }
    }

    pub fn getEntry(self: *Dictionary, key: *String, value_ptr: *i64) bool {
        // Extract self capacity
        const capacity = self.*.capacity;

        // hash the key string
        const hash = key.*.hash();

        var index = hash % capacity;
        var curr_entry = &self.*.items[index];

        while (!curr_entry.*.key.isEmpty() and !key.*.cmp(&curr_entry.*.key)) {
            index = (index + 1) % capacity;
            curr_entry = &self.*.items[index];
        }

        value_ptr.* = curr_entry.*.value;

        return !curr_entry.*.key.isEmpty();
    }

    pub fn display(self: *Dictionary) void {
        var index = 0;
        const capacity = self.*.capacity;

        var most_common_entry = &self.*.items[0];
        var total_entries = 0;

        while (index < capacity) {
            const curr_entry = &self.*.items[index];

            if (curr_entry.*.key.isEmpty()) {
                @printf("<Empty>\n");
            } else {
                @printf("Key: '%.*s', Value: %i\n", curr_entry.*.key.len, curr_entry.*.key.ptr, curr_entry.*.value);
                if (curr_entry.*.value > most_common_entry.*.value) {
                    most_common_entry = curr_entry;
                }
                total_entries += curr_entry.*.value;
            }
        } loop index += 1;

        @printf("Total entries: %d\n", total_entries);
        @printf("Total unique entries: %d\n", self.*.count);
        @printf("Most common entry: ");
        @printf("Key: '%.*s', Value: %i\n", most_common_entry.*.key.len, most_common_entry.*.key.ptr, most_common_entry.*.value);
    }

    pub fn export(self: *Dictionary, filename: *const u8, bytes_wrote: *i64) bool {
        var handle = @fcreate(filename);
        if (handle == -1) {
            handle = @fopen(filename);
            if (handle == -1) {
                return false;
            }
        }

        // Make buffer for value conversion 
        const buffer = @malloc(self.*.longest_key_len + 100) as *u8;
        var write_size = 0;

        var index = 0;
        const capacity = self.*.capacity;

        while (index < capacity) {
            const curr_entry = &self.*.items[index];

            if (!curr_entry.*.key.isEmpty()) {
                var quote_splicer: Splicer = undefined;
                quote_splicer.init(&curr_entry.*.key, '"');

                buffer[0] = '"';
                var current_index = 1 as u64;
                var slice: String = undefined;

                // First slice
                quote_splicer.next(&slice);
                @sprintf(&buffer[current_index], "%.*s", slice.len, slice.ptr);
                current_index += slice.len;

                while(quote_splicer.next(&slice)) {
                    buffer[current_index] = '\';
                    buffer[current_index + 1] = '"';
                    current_index += 2 as u64;
                    @sprintf(&buffer[current_index], "%.*s", slice.len, slice.ptr);
                    current_index += slice.len;
                }

                current_index += @sprintf(
                    &buffer[current_index],
                    "\" : %i,\n",
                    curr_entry.*.value
                );
                if(!@fwrite(handle, buffer, current_index, &write_size)) {
                    @fclose(handle);
                    return false;
                }
                bytes_wrote.* += write_size;
            }
        } loop index += 1;

        @free(buffer);
        @fclose(handle);
        return true;
    }

    pub fn free(self: *Dictionary) void {
        @free(self.*.items);
    }
}
