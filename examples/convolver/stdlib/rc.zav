pub struct Rc<T> {
    ref: *RcItem<T>;

    pub fn new(item: T) Rc<T> {
        var new_rc: Rc<T> = undefined;
        new_rc.ref = @malloc(@sizeof(new_rc.ref)) as *RcItem<T>;
        new_rc.ref.item = item;
        new_rc.ref.rc = 1 as u64;
        return new_rc;
    }

    pub fn clone(self: *const Rc<T>) Rc<T> {
        self.ref.rc += 1 as u64;
        return self.*;
    }

    pub fn free(self: *const Rc<T>) void {
        self.ref.rc -= 1 as u64;
        if (self.ref.rc == 0) {
            @free(self.ref);
        }
    }
}

struct RcItem<T> {
    item: T;
    rc: u64;
}